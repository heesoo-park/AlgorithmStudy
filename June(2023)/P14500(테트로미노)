// 통과한 풀이
// 처음에는 각 모양을 다 미리 지정을 해놓고 돌릴 생각이었어서 엄청 복잡하게 보였다
// 그런데 DFS를 길이만큼 돌리는 것이 같은 효과를 낸다는 걸 알고 나서는 나름 쉬워보였다
// DFS 나름 여러 문제 풀어봤던 거 같지만 이렇게 필요할 때는 잘 알아차리지 못하니 더 풀어봐야겠다
// 기본 틀에서 벗어나는 게 하나도 없었는데...
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int max = Integer.MIN_VALUE;
    static int N, M;
    static int[][] map;
    static boolean[][] visited;
    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        visited = new boolean[N][M];
        map = new int[N][M];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                // 1. 체크인
                visited[i][j] = true;
                DFS(i, j, map[i][j], 1);
                // 6. 체크아웃
                visited[i][j] = false;
            }
        }

        System.out.println(max);
    }

    static void DFS(int x, int y, int sum, int length) {
        // 2. 목적지인가?
        if (length == 4) {
            max = Math.max(max, sum);
            return;
        }
        // 3. 연결된 곳을 순회
        for (int i = 0; i < 4; i++) {
            int curX = x + dx[i];
            int curY = y + dy[i];

            if (curX < 0 || curX >= N || curY < 0 || curY >= M) continue;
            // 4. 갈 수 있는가?
            if (!visited[curX][curY]) {
                // ㅗ자를 위한 추가 탐색
                if (length == 2) {
                    visited[curX][curY] = true;
                    DFS(x, y, sum + map[curX][curY], length + 1);
                    visited[curX][curY] = false;
                }

                // 5. 간다
                visited[curX][curY] = true;
                DFS(curX, curY, sum + map[curX][curY], length + 1);
                visited[curX][curY] = false;
            }
        }
    }
}
