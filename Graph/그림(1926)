// 그림(1926)
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

int n, m;
int map[501][501];
bool visited[501][501];
int picture_count;
std::vector<int> picture_area(1,0);

int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,1,-1 };

void solve(int start_x, int start_y)
{
	std::queue<std::pair<int, int>> q;
	int count = 0;

	visited[start_x][start_y] = true;
	q.push({ start_x,start_y });
	count++;

	while (!q.empty())
	{
		int cur_x = q.front().first;
		int cur_y = q.front().second;

		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int new_x = cur_x + dx[i];
			int new_y = cur_y + dy[i];

			if (new_x > n || new_x < 1 || new_y>m || new_y < 1)
				continue;
			if (visited[new_x][new_y])
				continue;
			if (map[new_x][new_y] == 0)
				continue;

			visited[new_x][new_y] = true;
			q.push({ new_x,new_y });
			count++;
		}
	}

	picture_count++;
	picture_area.push_back(count);
}

int main()
{
	std::ios_base::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);

	std::cin >> n >> m;

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			std::cin >> map[i][j];
		}
	}

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			if(!visited[i][j] && map[i][j] != 0)
				solve(i,j);
		}
	}

	std::sort(picture_area.rbegin(), picture_area.rend());

	std::cout << picture_count << std::endl;
	std::cout << picture_area.front() << std::endl;
}
