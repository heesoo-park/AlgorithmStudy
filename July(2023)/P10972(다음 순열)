// 메모리 초과난 풀이
// 아마 리스트에 순열들 다 넣으려고 하다보니 생긴 문제인듯 하다
// 이 방식으로 재제출을 해봤지만 똑같이 메모리 초과가 떴다
import java.io.*;
import java.util.*;

public class Main {
    static int N;
    static boolean[] visited;
    static List<String> Permutation = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());
        String prevTarget = br.readLine();
        visited = new boolean[N + 1];

        getPerm(0, "");
        checkPerm(prevTarget);
    }

    static void getPerm(int num, String str) {
        if (num == N) {
            str = str.substring(0, str.length() - 1);
            Permutation.add(str);
            return;
        }

        for (int i = 1; i < N + 1; i++) {
            if (!visited[i]) {
                visited[i] = true;
                getPerm(num + 1, str + i + " ");
                visited[i] = false;
            }
        }
    }

    static void checkPerm(String s) {
        for (int i = 0; i < Permutation.size(); i++) {
            if (Permutation.get(i).equals(s)) {
                if (i != Permutation.size() - 1) {
                    System.out.println(Permutation.get(i + 1));
                } else {
                    System.out.println(-1);
                }
                break;
            }
        }
    }
}

// 순열을 다 구해놓고 하려면 메모리초과가 나는 문제였다...
// 어제 한 걸로 잘 기억해서 짰다 했는데... 이 방식이 아니었다니
// 여기는 공식처럼 되어있는 거를 써야했다
// 브루트포스에 그냥 다 구하는걸로 포커스를 맞췄다가 다른 방법이어서 약간 허무했다
import java.io.*;
import java.util.*;

public class Main {
    static int N;
    static int[] nums;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        N = Integer.parseInt(br.readLine());
        nums = new int[N];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            nums[i] = Integer.parseInt(st.nextToken());
        }

        if (nextPerm()) {
            for (int i = 0; i < N; i++) {
                System.out.print(nums[i] + " ");
            }
        } else {
            System.out.println(-1);
        }
    }

    static boolean nextPerm() {
        int i = nums.length - 1;
        // 가장 긴 감소부분수열의 시작점 찾기
        while (i > 0 && nums[i - 1] > nums[i]) {
            i--;
        }
        if (i <= 0) { // 전체가 다 감소수열이라면 마지막 순열이라 false
            return false;
        }
        // 감소부분수열 시작점 전 값보다 큰 값 찾기 
        int j = nums.length - 1;
        while (nums[j] < nums[i - 1]) {
            j--;
        }
        // 교환
        swap(j, i - 1);
        // 내림차순이던 값을 뒤집어서 오름차순으로 변경
        j = nums.length - 1;
        while(i < j) {
            swap(i, j);
            i++;
            j--;
        }

        return true;
    }

    static void swap(int n1, int n2) {
        int temp = nums[n1];
        nums[n1] = nums[n2];
        nums[n2] = temp;
    }
}
