// 효율적인 해킹(1325)
#include <iostream>
#include <vector>
#include <cstring>

int N, M;
std::vector<int> route[10001];
int visited[10001];
int result[10001];

void solve(int start_pos)
{
	int size = route[start_pos].size();
	for (int i = 0; i < size; i++)
	{
		if (!visited[route[start_pos][i]])
		{
			visited[route[start_pos][i]] = 1;
			solve(route[start_pos][i]);
		}
	}
}

int main()
{
	std::ios_base::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);

	std::cin >> N >> M;

	int A, B;
	for (int i = 0; i < M; i++)
	{
		std::cin >> A >> B;
		route[B].push_back(A);
	}

	for (int i = 1; i <= N; i++)
	{
		visited[i] = 1;
		solve(i);

		int count = 0;
		for (int j = 1; j <= N; j++)
		{
			if (visited[j])
				count++;
		}

		result[i] = count;

		memset(visited, 0, sizeof(visited));
	}

	int max = 0;
	for (int i = 1; i <= N; i++)
	{
		if (max < result[i])
			max = result[i];
	}
	
	for (int i = 1; i <= N; i++)
	{
		if (max == result[i])
			std::cout << i << ' ';
	}
	std::cout << std::endl;
}
