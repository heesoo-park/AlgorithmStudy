// 영역 구하기(2583)
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

int M, N, K;
int map[100][100];
bool visited[100][100];

int dx[4] = { 1,-1,0,0 };
int dy[4] = { 0,0,1,-1 };

int solve(int start_x, int start_y)
{
	std::queue<std::pair<int, int>> q;
	int count = 0;

	visited[start_x][start_y] = true;
	q.push({ start_x,start_y });
	count++;

	while (!q.empty())
	{
		int cur_x = q.front().first;
		int cur_y = q.front().second;

		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int new_x = cur_x + dx[i];
			int new_y = cur_y + dy[i];

			if (new_x < 0 || new_x >= M || new_y < 0 || new_y >= N)
				continue;

			if (visited[new_x][new_y])
				continue;

			if (map[new_x][new_y])
				continue;

			visited[new_x][new_y] = true;
			q.push({ new_x,new_y });
			count++;
		}
	}

	return count;
}

int main()
{
	std::ios_base::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);

	std::vector<int> areas;
	std::cin >> M >> N >> K;

	int f_x, f_y, l_x, l_y;
	for (int i = 0; i < K; i++)
	{
		std::cin >> f_x >> f_y >> l_x >> l_y;
		for (int y = f_y; y < l_y; y++)
		{
			for (int x = f_x; x < l_x; x++)
			{
				map[y][x] = 1;
			}
		}
	}

	for (int i = 0; i < M; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if(map[i][j] != 1 && visited[i][j] == false)
				areas.push_back(solve(i,j));
		}
	}
	
	std::sort(areas.begin(), areas.end());
	int area_num = areas.size();
	std::cout << area_num << std::endl;
	for (int i = 0; i < area_num; i++)
	{
		std::cout << areas[i] << ' ';
	}
}
