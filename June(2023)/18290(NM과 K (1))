// 틀린 풀이
// 문제를 딱 보고 이건 DFS 완전탐색을 개수만큼만 하면 되겠구나! 까지는 갔다
// 백트래킹이 이거구나 싶었는데...
// 그 세부 구현에서는 막혔다
import java.io.*;
import java.util.StringTokenizer;

public class Main {
    static int N, M, K, ans;
    static int[][] map;
    static boolean[][] visited;
    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        visited = new boolean[N][M];
        ans = Integer.MIN_VALUE;

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        DFS(0, 0, 0, 0);
        System.out.println(ans);
    }

    static void DFS(int x, int y, int sum, int length) {
        // 2. 목적지인가?
        if (length == K) {
            ans = Math.max(ans, sum);
            return;
        }

        // 3. 연결된 곳을 순회
        for (int i = x; i < N; i++) {
            for (int j = y; j < M; j++) {
                if (visited[i][j]) {
                    continue;
                }
                // 4. 갈 수 있는가?
                boolean isAdj = false;
                for (int dir = 0; dir < 4; dir++) {
                    int curX = i + dx[dir];
                    int curY = j + dy[dir];

                    if ((curX >= 0 && curX < N && curY >= 0 && curY < M) && visited[curX][curY]) {
                        isAdj = true;
                        break;
                    }
                }

                if (!isAdj) {
                    // 5. 간다
                    visited[i][j] = true;
                    DFS(i, j, sum + map[i][j], length + 1);
                    visited[i][j] = false;
                }
            }
        }
    }
}

// 통과한 풀이
// 찾아보면서 진행했는데 중간에 범위 설정에서 헷갈렸다
// 왜 필요한지 잘 이해를 못했는데 선택된 좌표 다음 줄 첫번재 값으로 가기 위한 것으로 이해했다
// 전에 풀었던 테트로미노랑 거의 유사한 느낌이었지만 인접한 칸은 제외해야하는 조건때문에 머리가 멈췄다
// 그래도 유형이 보이는 거 같기도 하다
import java.io.*;
import java.util.StringTokenizer;

public class Main {
    static int N, M, K, ans;
    static int[][] map;
    static boolean[][] visited;
    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        visited = new boolean[N][M];
        ans = Integer.MIN_VALUE;

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        DFS(0, 0, 0, 0);
        System.out.println(ans);
    }

    static void DFS(int x, int y, int sum, int length) {
        // 2. 목적지인가?
        if (length == K) {
            ans = Math.max(ans, sum);
            return;
        }

        // 3. 연결된 곳을 순회
        for (int i = x; i < N; i++) {
            for (int j = (i == x ? y : 0); j < M; j++) {
                if (visited[i][j]) {
                    continue;
                }
                // 4. 갈 수 있는가?
                boolean isAdj = false;
                for (int dir = 0; dir < 4; dir++) {
                    int curX = i + dx[dir];
                    int curY = j + dy[dir];

                    if ((curX >= 0 && curX < N && curY >= 0 && curY < M) && visited[curX][curY]) {
                        isAdj = true;
                        break;
                    }
                }

                if (!isAdj) {
                    // 5. 간다
                    visited[i][j] = true;
                    DFS(i, j, sum + map[i][j], length + 1);
                    visited[i][j] = false;
                }
            }
        }
    }
}
