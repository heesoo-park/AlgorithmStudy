// 안전 영역(2468)
#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

int N;
int map[101][101];
bool visited[101][101];

int dx[4] = { 1,-1,0,0 }; 
int dy[4] = { 0,0,1,-1 };

void solve(int start_x, int start_y, int height)
{
	std::queue<std::pair<int, int>> q;

	visited[start_x][start_y] = true;
	q.push({ start_x, start_y });

	while (!q.empty())
	{
		int cur_x = q.front().first;
		int cur_y = q.front().second;

		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int new_x = cur_x + dx[i];
			int new_y = cur_y + dy[i];

			if (new_x < 1 || new_x > N || new_y < 1 || new_y > N)
				continue;

			if (visited[new_x][new_y])
				continue;

			if (map[new_x][new_y] <= height)
				continue;

			visited[new_x][new_y] = true;
			q.push({ new_x, new_y });
		}
	}
}

int main()
{
	std::ios_base::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);

	std::cin >> N;

	int max = 0;
	for (int i = 1; i <= N; i++)
	{
		for (int j = 1; j <= N; j++)
		{
			std::cin >> map[i][j];
			if (max < map[i][j])
				max = map[i][j];
		}
	}

	std::vector<int> safeArea;
	for (int i = 0; i <= max; i++)
	{
		int result = 0;
		for (int j = 1; j <= N; j++)
		{
			for (int k = 1; k <= N; k++)
			{
				if (map[j][k] > i && visited[j][k] == false)
				{
					solve(j, k, i);
					result++;
				}
			}
		}
		safeArea.push_back(result);

		for (int j = 1; j <= N; j++)
		{
			for (int k = 1; k <= N; k++)
			{
				visited[j][k] = false;
			}
		}
	}

	std::sort(safeArea.rbegin(), safeArea.rend());
	std::cout << safeArea[0] << std::endl;
}
