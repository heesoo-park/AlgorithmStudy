import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static char[][] map;
    static boolean[][][][] check;
    static int[] dx = {0, 1, 0, -1};
    static int[] dy = {1, 0, -1, 0};
    static Marble red, blue;
    static int hole_x, hole_y;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        map = new char[N][M];
        check = new boolean[N][M][N][M];

        for (int i = 0; i < N; i++) {
            String line = br.readLine();
            for (int j = 0; j < M; j++) {
                map[i][j] = line.charAt(j);
                if (line.charAt(j) == 'R') {
                    red = new Marble(i, j);
                } else if (line.charAt(j) == 'B') {
                    blue = new Marble(i, j);
                } else if (line.charAt(j) == 'O') {
                    hole_x = i;
                    hole_y = j;
                }
            }
        }
        bw.write(BFS() + "\n");
        bw.flush();
    }

    static int BFS() {
        check[red.x][red.y][blue.x][blue.y] = true;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(red, blue, 0));

        while (!q.isEmpty()) {
            // 1. 큐에서 꺼냄
            Pair cur = q.poll();

            // 예외 종료 조건
            if (cur.cnt > 10) {
                return -1;
            }

            // 2. 목적지인가?
            if (cur.red.x == hole_x && cur.red.y == hole_y) {
                return cur.cnt;
            }

            // 3. 연결된 곳을 순회
            for (int i = 0; i < 4; i++) {
                Marble new_red = Move(cur.red, i);
                Marble new_blue = Move(cur.blue, i);

                if (new_blue.x == hole_x && new_blue.y == hole_y) {
                    continue;
                }

                if (new_red.x == new_blue.x && new_red.y == new_blue.y) {
                    switch (i) {
                        case 0:
                            if (cur.red.y > cur.blue.y) {
                                new_blue.y--;
                            } else {
                                new_red.y--;
                            }
                            break;
                        case 1:
                            if (cur.red.x > cur.blue.x) {
                                new_blue.x--;
                            } else {
                                new_red.x--;
                            }
                            break;
                        case 2:
                            if (cur.red.y > cur.blue.y) {
                                new_red.y++;
                            } else {
                                new_blue.y++;
                            }
                            break;
                        case 3:
                            if (cur.red.x > cur.blue.x) {
                                new_red.x++;
                            } else {
                                new_blue.x++;
                            }
                            break;
                    }
                }

                // 4. 갈 수 있는가?
                if (!check[new_red.x][new_red.y][new_blue.x][new_blue.y]) {
                    // 5. 체크인
                    check[new_red.x][new_red.y][new_blue.x][new_blue.y] = true;
                    // 6. 큐에 넣기
                    q.add(new Pair(new_red, new_blue, cur.cnt + 1));
                }
            }
        }

        return -1;
    }

    static Marble Move(Marble marble, int dir) {
        int x = marble.x;
        int y = marble.y;

        while (map[x + dx[dir]][y + dy[dir]] != '#') {
            x += dx[dir];
            y += dy[dir];
            if (x == hole_x && y == hole_y) {
                break;
            }
        }

        return new Marble(x, y);
    }
}

class Marble {
    int x, y;

    public Marble(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Pair {
    Marble red;
    Marble blue;
    int cnt;

    public Pair(Marble red, Marble blue, int cnt) {
        this.red = red;
        this.blue = blue;
        this.cnt = cnt;
    }
}
