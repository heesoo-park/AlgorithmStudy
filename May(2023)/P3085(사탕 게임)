// 통과한 풀이
// 반복문이 너무 많아서 시간 내에 통과할까 의문이었지만 2차원배열 사이즈가 작고 가지치기를 좀 해서 통과한 듯 하다
import java.io.*;

public class Main {
    static int[] dx = {1, 0};
    static int[] dy = {0, 1};
    static int max = 0;
    static char[][] map;
    static int size;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        size = Integer.parseInt(br.readLine());
        map = new char[size][size];
        
        // 배열에 값 저장
        for (int i = 0; i < size; i++) {
            String line = br.readLine();
            for (int j = 0; j < size; j++) {
                map[i][j] = line.charAt(j);
            }
        }
        
        // 전체 순회
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                // 아래와 오른쪽 방향만 체크
                for (int k = 0; k < 2; k++) {
                    if (i + dx[k] < size && j + dy[k] < size) {
                        if (map[i][j] != map[i + dx[k]][j + dy[k]]) {
                            // 해당 위치값 swap
                            char temp = map[i][j];
                            map[i][j] = map[i + dx[k]][j + dy[k]];
                            map[i + dx[k]][j + dy[k]] = temp;

                            countCandy();
                            
                            // 해당 위치값 swap
                            temp = map[i][j];
                            map[i][j] = map[i + dx[k]][j + dy[k]];
                            map[i + dx[k]][j + dy[k]] = temp;
                        }
                    }
                }
            }
        }
        System.out.println(max);
    }

    private static void countCandy() {
        int cnt = 1;
        
        // 전체 행 계산
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size - 1; j++) {
                if (map[i][j] == map[i][j + 1]) cnt++;
                else cnt = 1;
                max = Math.max(max, cnt);
            }
            cnt = 1;
        }
        // 전체 열 계산
        for (int j = 0; j < size; j++) {
            for (int i = 0; i < size - 1; i++) {
                if (map[i][j] == map[i + 1][j]) cnt++;
                else cnt = 1;
                max = Math.max(max, cnt);
            }
            cnt = 1;
        }
    }
}
