// 시간초과난 풀이
// 최소공배수를 써야한다는 거 까지는 알아차렸는데 시간초과는 어떻게 해야하나 싶더라
import java.io.*;
import java.util.StringTokenizer;

public class Main {
    static int T;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        int M, N, x, y;

        T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            int count = 1, a = 1, b = 1;
            st = new StringTokenizer(br.readLine());
            M = Integer.parseInt(st.nextToken());
            N = Integer.parseInt(st.nextToken());
            x = Integer.parseInt(st.nextToken());
            y = Integer.parseInt(st.nextToken());

            int maxCount = (M * N) / gcd(M, N);

            while(a != x || b != y) {
                if (a == M) a = 1;
                else a += 1;

                if (b == N) b = 1;
                else b += 1;

                count++;
                if (maxCount < count) break;
            }

            if (maxCount < count) System.out.println(-1);
            else System.out.println(count);
        }
    }

    static int gcd(int first, int second) {
        if (second == 0) return first;
        else return gcd(second, first % second);
    }
}

// 통과한 풀이
// x,y를 둘다 증가시키면서 풀면 시간초과가 나오고 하나를 고정시켜놓고 다른 값을 맞춰가는 방식을 써야하더라
import java.io.*;
import java.util.StringTokenizer;

public class Main {
    static int T;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        int M, N, x, y;

        T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            st = new StringTokenizer(br.readLine());
            M = Integer.parseInt(st.nextToken());
            N = Integer.parseInt(st.nextToken());
            x = Integer.parseInt(st.nextToken());
            y = Integer.parseInt(st.nextToken());

            int count = x % (M + 1);
            int maxCount = (M * N) / gcd(M, N);

            for (int j = x; j <= maxCount; j += M) {
                int temp = (j % N == 0) ? N : j % N;
                if (temp == y) {
                    bw.write(j + "\n");
                    break;
                }

                count += M;
            }
            if (maxCount < count) bw.write(-1 + "\n");
        }

        bw.flush();
    }

    static int gcd(int first, int second) {
        if (second == 0) return first;
        else return gcd(second, first % second);
    }
}

