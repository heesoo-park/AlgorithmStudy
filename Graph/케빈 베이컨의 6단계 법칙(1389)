// 케빈 베이컨의 6단계 법칙(1389)
#include <iostream>
#include <vector>
#include <cstring>
#include <climits>
#include <algorithm>

int N, M;
std::vector<int> relations[101];
int visited[101];
int result[101][101];
int cur_axis;

void solve(int start_pos, int count)
{
	int size = relations[start_pos].size();
	for (int i = 0; i < size; i++)
	{
		if (!visited[relations[start_pos][i]])
		{
			visited[relations[start_pos][i]] = 1;

			if (result[cur_axis][relations[start_pos][i]] != 0)
				result[cur_axis][relations[start_pos][i]] = std::min(result[cur_axis][relations[start_pos][i]], count);
			else
				result[cur_axis][relations[start_pos][i]] = count;

			solve(relations[start_pos][i], count + 1);
			visited[relations[start_pos][i]] = 0;
		}
	}
}

int main()
{
	std::ios_base::sync_with_stdio(false);
	std::cin.tie(NULL);
	std::cout.tie(NULL);

	std::cin >> N >> M;

	int A, B;
	for (int i = 0; i < M; i++)
	{
		std::cin >> A >> B;
		relations[A].push_back(B);
		relations[B].push_back(A);
	}

	for (int i = 1; i <= N; i++)
	{
		cur_axis = i;
		memset(visited, 0, sizeof(visited));
		visited[i] = 1;
		solve(i, 1);
	}

	std::pair<int, int> answer(INT_MAX, 0);
	for (int i = 1; i <= N; i++)
	{
		int line_sum = 0;
		for (int j = 1; j <= N; j++)
		{
			line_sum += result[i][j];
		}

		if (answer.first > line_sum)
		{
			answer.first = line_sum;
			answer.second = i;
		}
	}

	std::cout << answer.second;
}
